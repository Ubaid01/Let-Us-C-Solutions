(i) Match the following with reference to the following program 
segment: 
 
unsigned int  arr[3][3] = { 
      2, 4, 6, 
      9, 1, 10, 
      16, 64, 5 
        } ; 
 
1. **arr                                            a. 64 
2. **arr < *( *arr + 2 )                            b. 18 
3. **( arr + 2 ) / ( *( *arr + 1 ) > **arr )         c. 6 
4. *( arr[1] + 1 ) | arr[1][2]                      d. 3 
5. *( arr[0] ) | *( arr[2] )                        e. 0 
6. arr[1][1] < arr[0][1]                            f. 16 
7. arr[2][1] & arr[2][0]                           g. 1 
8. arr[2][2] | arr[0][1]                            h. 11 
9. arr[0][1] ^ arr[0][2]                            i. 20 
10. ++**arr + --arr[1][1]                           j. 2 
                                                    k. 5 
                                                    l. 4
"Correct Answers:- "

1. **arr  
"This will print value pointing base address arr[0][0] i.e. j. 2"

2. **arr < *( *arr + 2 )   
"This will compare the values arr[0][0] and (first dereferenced then 2 added in column) arr[0][2] so 2 < 6 which is TRUE program returns g. 1."

3. *( arr + 2 ) / ( *( *arr + 1 ) > **arr ) 
"arr[2][0] divided by ( arr[0][1] > arr[0][0] since 4 > 2 so returns 1) hence 16 / 1 = f. 16"

4. *( arr[1] + 1 ) | arr[1][2] 
"So arr[1] will be referring to entire 2nd Row and 1 incremented in it points arr[1][1] so OR-binary of 1 and 10 will be => 0000 0001 | 0000 1010 = 0000 1011 which equals to h. 11"

5. *( arr[0] ) | *( arr[2] ) 
"Here binary OR of arr[0][0] arr[2][0] i.e. 2 | 16 i.e. 0000 0010 | 0001 0000 = 0001 0010 which equals to b. 18"

6. arr[1][1] < arr[0][1]  
"Since 1 < 4 is TRUE so returns 1."

7. arr[2][1] & arr[2][0] 
"Now Binary AND of 64 | 16 i.e. 0100 0000 & 0001 0000 = 0000 0000 which equals to e. 0."

8. arr[2][2] | arr[0][1]
"Binary OR of 5 | 4 i.e. 101 | 100 = 101 which equals to k. 5."

9. arr[0][1] ^ arr[0][2]
"Binary XOR-operator on 4 | 6 i.e. 100 ^ 110 (In XOR only opoosite terms equal to 1)= 010 which equals to j. 2."

10. ++**arr + --arr[1][1]   
"Addition of Pre-increment and decrement of arr[0][0] i.e. ++2 so arr[0][0] then becomes 3 and--1 first uses then becomes 0 so 2 + 1 = d. 3 "