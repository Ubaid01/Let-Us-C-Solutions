int  i, j = 25 ; 
int  *pi , *pj = & j ; 
……. 
…….  /* more lines of program */ 
……. 
    *pj = j + 5; 
    j = *pj + 5 ; 
    pj = pj ; 
    *pi = i + j ;

"Each integer quantity occupies 2 bytes of memory. The value 
assigned to i begin at (hexadecimal) address F9C and the 
value assigned to j begins at address F9E. Match the value 
represented by left hand side quantities with the right."
  
1.  &i              a. 30
2.  &j              b. F9E
3.  pj              c. 35      
4. *pj              d. FA2
5.  i               e. F9C 
6.  pi              f. 67 
7. *pi              g. unspecified 
8. ( pi + 2 )       h. 65 
9. (*pi + 2)        i. F9E 
10. * ( pi + 2 )    j. F9E 
                    k. FAO 
                    l. F9D 

"So  Correct Answers are: "

1. &i : Address of i (where i is stored):
    " Value: e) F9C (Given in the question) "

2. &j : Address of j (where j is stored):
    " Value: b) F9E (Given in the question) "

3. pj : Value stored in the pointer pj:
    " Value: Unchanged; it still points to the address of j (F9E) (Option i.)"
4. *pj : Value stored at the address pointed by pj:
    " Value: c. 35 (Initially j was 25, then *pj = j + 5 and j = *pj + 5) "
5. i : Value stored in i (uninitialized local variable):
    " Value: g. Unspecified (as it is uninitialized so returns garbage value everytime.) "
6. pi : Value stored in the pointer pi:
    " Value: Uninitialized (it doesn't point to any specific address) "
7. *pi : Value stored at the address pointed by pi (unspecified):

8. (pi + 2) : Address calculated by adding 4 (2 x 2) to the address stored in pi:
 " Value: F9E (Assuming the pointer arithmetic increments by the size of an int which is 2 bytes, F9E is the address two integers away from pi) "

9. (*pi + 2) : Value at the address pointed by pi, plus 2:
    " Value: Unspecified (since pi is uninitialized) "
10. *(pi + 2) : Value at the address two integers away from pi:
    " Value: Unspecified (since pi is uninitialized) "