[A] Answer the following: 

(a) What is a preprocessor directive 
3. a message from programmer to the preprocessor (Correct)

(b) Which of the following are correctly formed #define statements: 
#define INCH PER FEET 12 
#define SQR (X) ( X * X ) 
#define SQR(X) X * X 
#define SQR(X) ( X * X ) (Correct Statement Syntax_Wise & logically)

(c) State True or False: 
1. A macro must always be written in capital letters.
False:- "There is no strict rule that macros must always be written in capital letters. While it's a common convention to write macros in all uppercase to differentiate them from regular code." 
2. A macro should always be accomodated in a single line. 
False:- " Macros can span multiple lines using a backslash \ at the end of a line to continue the definition onto the next line. However, each individual line in a macro definition is treated as a separate preprocessing directive. "
3. After preprocessing when the program is sent for compilation the macros are removed from the expanded source code. 
True:- " During preprocessing, macros are expanded and replaced with their corresponding definitions in the source code. After preprocessing, the compiler works with the modified source code where the macros are replaced by their expansions. "
4. Macros with arguments are not allowed.
False:- " Macros with arguments are allowed and commonly used in C. These are called function-like macros and can take arguments for processing. " For example: #define SQUARE(x) ((x) * (x)) 
5. Nested macros are allowed. 
True:- " Macros can be nested within other macros. It's possible to define a macro that uses another macro within its definition. However, proper care should be taken to ensure that nested macros are expanded correctly without causing unintended side effects. "
6. In a macro call the control is passed to the macro.
False:- " In a macro call, the control is not passed as in a function call. Macros are expanded by the preprocessor, and their bodies are substituted directly into the code wherever the macros are called. There's no function call mechanism involved; it's a direct text substitution process carried out by the preprocessor. "

(d) How many #include directives can be there in a given program file? 
" There isn't a strict limit defined by the C standard on the number of #include directives that can be used in a program file. You can have multiple #include directives in a program file to include different header files as needed by the program. "

(e) What is the difference between the following two #include directives: 
#include "conio.h" => searches for the conio.h header file in the current directory first, then in other specified path directories.
#include <conio.h>  =>  searches for the conio.h header file in the standard system directories specified by the compiler.

(f) A header file is: 
1. A file that contains standard library functions 
2. A file that contains definitions and macros (Correct)
3. A file that contains user - defined functions 
4. A file that is present in current working directory

(g) Which of the following is not a preprocessor directive 
1. #if 
2. #elseif (Correct)
3. #undef 
4. #pragma 
"The correct directive is #elif for "else if" in pre-processor conditional directives. #elseif is not a recognized pre-processor directive."

(h) All macro substitutions in a program are done 
1. Before compilation of the program (Correct)
2. After compilation 
3. During execution 
4. None of the above 
"Before compilation of the program. Macro substitutions occur during the pre-processing phase before the actual compilation of the code."

(i) In a program the statement: #include "filename" is replaced by the contents of the file "filename" 
1. Before compilation (Correct)
2. After Compilation 
3. During execution 
4. None of the above
"Before compilation. During pre-processing, the #include directive is replaced by the contents of the specified file before the actual compilation phase"